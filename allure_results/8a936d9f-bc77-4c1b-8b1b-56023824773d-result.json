{"name": "выход из аккаунта", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Account_button__14Yp3 text text_type_main-medium text_color_inactive\" type=\"button\"> is not clickable at point (56,373) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31", "trace": "self = <tests.test_login.TestLogin object at 0x0000016D50221EE0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"11ddc182-8c70-4bf2-89d8-d533e5b5b7b2\")>\n\n    @allure.sub_suite(\"Выход\")\n    @allure.title(\"выход из аккаунта\")\n    def test_exit_account(self, driver):\n        login = LoginPage(driver)\n        login.authentication_user()\n        login.wait_element(HomeLocators.ACCOUNT_BUTTON).click()\n>       login.wait_element(ProfileLocators.EXIT_BUTTON).click()\n\ntests\\test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016D50280230>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"Account_bu...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Account_button__14Yp3 text text_type_main-medium text_color_inactive\" type=\"button\"> is not clickable at point (56,373) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Переход к 'https://stellarburgers.nomoreparties.site/login'", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/login'"}], "start": 1729445918691, "stop": 1729445922241}, {"name": "Ввод текста 'egorova_13@gmail.com'  в элемент ('name', 'name')", "status": "passed", "steps": [{"name": "ожидание элемента ('name', 'name')", "status": "passed", "parameters": [{"name": "locator", "value": "('name', 'name')"}], "start": 1729445922242, "stop": 1729445922301}], "parameters": [{"name": "locator", "value": "('name', 'name')"}, {"name": "set_text", "value": "'egorova_13@gmail.com'"}], "start": 1729445922242, "stop": 1729445922432}, {"name": "Ввод текста 'Qwerty13'  в элемент ('xpath', '//input[@type=\"password\"]')", "status": "passed", "steps": [{"name": "ожидание элемента ('xpath', '//input[@type=\"password\"]')", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', '//input[@type=\"password\"]')"}], "start": 1729445922432, "stop": 1729445922453}], "parameters": [{"name": "locator", "value": "('xpath', '//input[@type=\"password\"]')"}, {"name": "set_text", "value": "'Qwerty13'"}], "start": 1729445922432, "stop": 1729445922480}, {"name": "Клик по элементу ('xpath', \"//button[text()='Войти']\"), без ожидания", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//button[text()='Войти']\")"}], "start": 1729445922480, "stop": 1729445922741}, {"name": "ожидание элемента ('xpath', \"//button[text()='Оформить заказ']\")", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//button[text()='Оформить заказ']\")"}], "start": 1729445922741, "stop": 1729445925801}, {"name": "ожидание элемента ('xpath', '//a[@href=\"/account\"]')", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', '//a[@href=\"/account\"]')"}], "start": 1729445925801, "stop": 1729445925822}, {"name": "ожидание элемента ('xpath', \"//button[text()='Выход']\")", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//button[text()='Выход']\")"}], "start": 1729445926081, "stop": 1729445926183}], "parameters": [{"name": "driver", "value": "'Firefox'"}], "start": 1729445918691, "stop": 1729445926199, "uuid": "111613a5-dc16-45c4-b1c7-6559b0b7310e", "historyId": "9d8ae27ede8f1d0803da416ffb5aa3bf", "testCaseId": "b86d0a806a33334d9a6c282686a520f9", "fullName": "tests.test_login.TestLogin#test_exit_account", "labels": [{"name": "subSuite", "value": "Выход"}, {"name": "feature", "value": "Личный кабинет"}, {"name": "suite", "value": "Личный кабинет"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "KITCHEN"}, {"name": "thread", "value": "21256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}